#+TITLE: Vlad dotemacs
#+STARTUP: overview
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes

* Dotemacs
Personal dotemacs configuration used mainly for programming and org mode.
Font Global Variables:
#+begin_src emacs-lisp

(defvar vt/default-font-size 140)
(defvar vt/default-variable-font-size 140)

#+end_src

** Tips
Packages' documentation can be accessed by using =C-c C-o= or running =M-x org-open-at-point=

* Startup performance

#+begin_src emacs-lisp

;; The default is 800 kilobytes.  Measured in bytes.
(setq gc-cons-threshold (* 50 1000 1000))

(defun vt/display-startup-time ()
  (message "Emacs loaded in %s with %d garbage collections."
           (format "%.2f seconds"
                   (float-time
                     (time-subtract after-init-time before-init-time)))
           gcs-done))

(add-hook 'emacs-startup-hook #'vt/display-startup-time)

#+end_src

* Native compilation
#+begin_src emacs-lisp

;; Silence compiler warnings as they can be pretty disruptive
(setq comp-async-report-warnings-errors nil)

#+end_src

* Package system setup
straight.el: next-generation, purely functional package manager for the Emacs hacker.

#+begin_src emacs-lisp

;; Bootstrap straight.el
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))


;; Use straight.el for use-package expressions
(straight-use-package 'use-package)
(setq straight-use-package-by-default t)

;; Load the helper package for commands like `straight-x-clean-unused-repos'
(require 'straight-x)

#+end_src

** Automatic Package Updates
The auto-package-update package helps us keep our Emacs packages up to date!  It will prompt you after a certain number of days either at startup or at a specific time of day to remind you to update your packages.

You can also use =M-x auto-package-update-now= to update right now.

#+begin_src emacs-lisp

(use-package auto-package-update
  :custom
  (auto-package-update-interval 7)
  (auto-package-update-prompt-before-update t)
  (auto-package-update-hide-results t)
  :config
  (auto-package-update-maybe)
  (auto-package-update-at-time "09:00"))

#+end_src

* Keep folders clean
We use the [[https://github.com/emacscollective/no-littering/blob/master/no-littering.el][no-littering]] package to keep folders where we edit files and the Emacs configuration folder clean!  It knows about a wide variety of variables for built in Emacs features as well as those from community packages so it can be much easier than finding and setting these variables yourself.

#+begin_src emacs-lisp

(use-package no-littering)

(setq auto-save-file-name-transforms
        `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))

#+end_src

* Bootstrap
** Better Defaults
#+BEGIN_SRC emacs-lisp

(setq-default
 create-lockfiles nil            ; do not create lock files
 intent-tabs-mode nil            ; do not use hard tabs
 auto-save-default nil           ; do not auto save
 enable-recursive-minibuffers t  ; allow commands to be run on mini buffers
 auto-windows-vscroll nil        ; lighten vertical scroll
 delete-by-moving-to-trash t     ; delete files to trash
 fill-column 80                  ; set witdh for automatic line breaks
 help-window-select t            ; focus new help windows when opened
 show-trailing-whitespace nil    ; do not display trailing whitespaces
 tab-width 4                     ; set width for tabs
 )

(cd "~/")                           ; cd into home
(delete-selection-mode 1)           ; replace region when inserting text
(fset 'yes-or-no-p 'y-or-n-p)       ; replace yes/no prompts with y/n
(global-auto-revert-mode t)         ; automatically update buffers if file changes on disk
(column-number-mode t)              ; display column number in mode line
(setq backup-directory-alist '(("." . "~/.save")))
(setq echo-keystrokes 0.1)
(setq x-stretch-cursor t)

#+END_SRC

Disable startup message in favour of a org-mode scratch buffer
#+BEGIN_SRC emacs-lisp

(setq
 inhibit-splash-screen t
 initial-scratch-message nil
 initial-major-mode 'org-mode)

#+END_SRC

Add parts of each file's directory to the buffer if not unique
#+begin_src emacs-lisp

(require 'uniquify)
(setq uniquify-buffer-name-style 'forward)

#+end_src

Save a list of recent files visited
#+begin_src emacs-lisp
(recentf-mode 1)
(defvar recentf-max-saved-items)
(setq recentf-max-saved-items 100)
#+end_src

** UI
This section configures basic UI settings that remove unneeded elements to make Emacs look a lot more minimal and modern.  If you're just getting started in Emacs, the menu bar might be helpful so you can remove the =(menu-bar-mode -1)= line if you'd like to still see that.
#+begin_src emacs-lisp

(progn
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (tooltip-mode -1)
  (scroll-bar-mode -1)
  (show-paren-mode 1))

#+end_src

Line numbers width
#+begin_src emacs-lisp

(setq display-line-numbers-width t)

#+end_src

Scrolling
#+begin_src emacs-lisp

(setq scroll-conservatively 101)

#+end_src

Add fringe to buffer
#+BEGIN_SRC emacs-lisp

(set-fringe-mode 10)

#+END_SRC

Font - PragmataPro
#+BEGIN_SRC emacs-lisp

(set-face-attribute 'default nil :font "PragmataPro Mono Liga" :height vt/default-font-size)
(set-face-attribute 'fixed-pitch nil :font "PragmataPro Mono Liga" :height vt/default-font-size)
(set-face-attribute 'variable-pitch nil :font "Iosevka Aile" :height vt/default-variable-font-size :weight 'regular)

#+END_SRC

All the icons
#+BEGIN_SRC emacs-lisp

(use-package all-the-icons)

#+END_SRC

Theme
[[https://github.com/hlissner/emacs-doom-themes][doom-themes]] is a great set of themes with a lot of variety and support for many different Emacs modes.  Taking a look at the [[https://github.com/hlissner/emacs-doom-themes/tree/screenshots][screenshots]] might help you decide which one you like best.  You can also run =M-x counsel-load-theme= to choose between them easily.
#+BEGIN_SRC emacs-lisp

(use-package doom-themes
  :init (load-theme 'doom-dracula t)
  (doom-themes-visual-bell-config))

#+END_SRC

** Custom functions
A collection of useful custom functions

*** Toggles
Functions to toggle various settings

#+begin_src emacs-lisp

(defun vt/toggle-line-numbers ()
  (interactive)
  (setq display-line-numbers
		(not (bound-and-true-p display-line-numbers))))

(defun vt/toggle-company-mode ()
  (interactive)
  (if (bound-and-true-p company-mode)
	  (company-mode -1)
	(company-mode 1)))

#+end_src

*** Open files
Functions to open various important files

#+begin_src emacs-lisp

(defun vt/open-config-file ()
  "Load the literate config file for Emacs"
  (interactive)
  (find-file "~/emacs-configs/emacs-default/dotemacs.org"))

#+end_src

** Key bindings
This configuration uses [[https://evil.readthedocs.io/en/latest/index.html][evil-mode]] for a Vi-like modal editing experience.  [[https://github.com/noctuid/general.el][general.el]] is used for easy keybinding configuration that integrates well with which-key.  [[https://github.com/emacs-evil/evil-collection][evil-collection]] is used to automatically configure various Emacs modes with Vi-like keybindings for evil-mode.

Make ESC quit prompts
#+BEGIN_SRC emacs-lisp

(global-set-key (kbd "<escape>") 'keyboard-escape-quit)

#+END_SRC

General
#+BEGIN_SRC emacs-lisp

(use-package general
  :after evil
  :config
  (general-create-definer vt/leader-keys
	:keymaps '(normal insert visual emacs)
	:prefix "SPC"
	:global-prefix "C-SPC")

  (vt/leader-keys
	"c" '(:ignore t :which-key "config")
	"cc" '(vt/open-config-file :which-key "open config")
	"t" '(:ignore t :which-key "toggles")
	"tl" '(vt/toggle-line-numbers :which-key "line numbers")
	"tc" '(vt/toggle-company-mode :which-key "company mode")
	"tt" '(counsel-load-theme :which-key "choose theme")))

#+END_SRC

Hydra
#+BEGIN_SRC emacs-lisp

(use-package hydra
  :defer t)

(defhydra hydra-text-scale (:timeout 4)
  "scale text"
  ("j" text-scale-increase "in")
  ("k" text-scale-decrease "out")
  ("f" nil "finished" :exit t))

(with-eval-after-load 'evil
    (vt/leader-keys
     "ts" '(hydra-text-scale/body :which-key "scale text")))

#+END_SRC

* Packages
** Selectrum
The focus of [[https://github.com/raxod502/selectrum][Selectrum]] is on providing an enhanced completion UI and compose with other packages which stay within the constraints of the standard Emacs API. Because of the modular approach there are several possible package combinations.

#+begin_src emacs-lisp

(use-package selectrum
  :straight t
  :config
  (selectrum-mode +1)
  :custom
  (selectrum-extend-current-candidate-highlight t)
  (selectrum-fix-vertical-window-height t))

#+end_src

** Selectrum Prescient
[[https://github.com/raxod502/prescient.el][prescient.el]] is a library which sorts and filters lists of candidates, such as appear when you use a package like Ivy or Company. Extension packages such as ivy-prescient.el and company-prescient.el adapt the library for usage with various frameworks.

#+begin_src emacs-lisp

(use-package selectrum-prescient
  :after selectrum
  :init
  (selectrum-prescient-mode +1)
  (prescient-persist-mode +1))

#+end_src

** Consult
[[https://github.com/minad/consult][consult]] provides various practical commands based on the Emacs completion function completing-read, which allows to quickly select an item from a list of candidates with completion.

#+begin_src emacs-lisp

(use-package consult
  :straight t
  :bind (([remap list-buffers] . consult-buffer) 
		 ("C-c h" . consult-history)
		 ("C-c m" . consult-mode-command)
		 ("C-c b" . consult-bookmark)
		 ("C-s" . consult-line)
		 ("C-x b" . consult-buffer)
		 ("M-y" . consult-yank-pop)
		 ("M-g g" . consult-goto-line)
		 ("M-g M-g" . consult-goto-line)
		 ("M-g o" . consult-outline)
		 ("M-g i" . consult-imenu)
		 ("M-g I" . consult-project-imenu)
		 ("M-s f" . consult-find)
		 ("M-s L" . consult-locate)
		 ("M-s G" . consult-git-grep)
		 ("M-s r" . consult-ripgrep)
		 ("M-s l" . consult-line)
		 ("M-s e" . consult-isearch)
		 :map isearch-mode-map
		 ("M-e" . consult-isearch)
		 ("M-s e" . consult-isearch)
		 ("M-s l" . consult-line))
  :init
  (setq xref-show-xrefs-function #'consult-xref
		xref-show-definitions-function #'consult-xref)
  :config
  (autoload 'projectile-project-root "projectile")
  (setq consult-project-root-function #'projectile-project-root))

#+end_src

** Orderless
This package provides an [[https://github.com/oantolin/orderless][orderless]] completion style that divides the pattern into space-separated components, and matches candidates that match all of the components in any order

#+begin_src emacs-lisp

(use-package orderless
  :straight t
  :init
  (setq completion-styles '(orderless)
		completion-category-defaults nil
		completion-category-overrides '((file (styles . (partial-completion))))))

#+end_src

** Embark
This package provides a sort of right-click contextual menu for Emacs, accessed through the [[https://github.com/oantolin/embark/][embark]]-act command (which you should bind to a convenient key), offering you relevant actions to use on a target determined by the context:

+ In the minibuffer, the target is the current best completion candidate.
+ In the *Completions* buffer the target is the completion at point.
+ In a regular buffer, the target is the region if active, or else the file, symbol or URL at point.

#+begin_src emacs-lisp

(use-package embark
  :straight t
  :bind
  (("C-S-a" . embark-act)	  ;; pick some comfortable binding
   ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'
  :init
  (setq prefix-help-command #'embark-prefix-help-command))

(use-package embark-consult
  :ensure t
  :after (embark consult)
  :demand t
  :hook
  (embark-collect-mode . embark-consult-preview-minor-mode))

#+end_src

** Marginalia
 [[https://github.com/minad/marginalia][Marginalia]] are marks or annotations placed at the margin of the page of a book or in this case helpful colorful annotations placed at the margin of the minibuffer for your completion candidates.

#+begin_src emacs-lisp

(use-package marginalia
  :init
  (marginalia-mode))

#+end_src

** Doom modeline
[[https://github.com/seagle0128/doom-modeline][doom-modeline]] is a very attractive and rich (yet still minimal) mode line configuration for Emacs.  The default configuration is quite good but you can check out the [[https://github.com/seagle0128/doom-modeline#customize][configuration options]] for more things you can enable or disable.

*NOTE:* The first time you load your configuration on a new machine, you'll need to run `M-x all-the-icons-install-fonts` so that mode line icons display correctly.
#+BEGIN_SRC emacs-lisp

(use-package doom-modeline
  :init (doom-modeline-mode 1))

(defun doom-modeline-conditional-buffer-encoding ()
  "We expect the encoding to be LF UTF-8, so only show the modeline when this is not the case"
  (setq-local doom-modeline-buffer-encoding
              (unless (or (eq buffer-file-coding-system 'utf-8-unix)
                          (eq buffer-file-coding-system 'utf-8)))))

(add-hook 'after-change-major-mode-hook #'doom-modeline-conditional-buffer-encoding)

#+END_SRC

** Vim in emacs - evil mode
#+BEGIN_SRC emacs-lisp

(use-package evil
  :init
  (setq evil-want-keybinding nil)
  (setq evil-want-integration t)
  (setq evil-search-module 'evil-search)
  (setq evil-ex-complete-emacs-commands nil)
  (setq evil-vsplit-window-right t)
  (setq evil-split-window-below t)
  (setq evil-shift-round nil)
  (setq evil-want-C-u-scroll t)
  :config
  (evil-mode 1))

;; Use visual line motions even outside of visual-line-mode buffers
(evil-global-set-key 'motion "j" 'evil-next-visual-line)
(evil-global-set-key 'motion "k" 'evil-previous-visual-line)

#+END_SRC

** Evil Collection
#+BEGIN_SRC emacs-lisp

(use-package evil-collection
  :after evil
  :config
  (evil-collection-init))

(use-package evil-escape
  :after evil
  :config
  (setq-default evil-escape-key-sequence "jk"
                evil-escape-delay 0.15)
  (evil-escape-mode))

#+END_SRC

** Evil Nerd Commenter

Emacs' built in commenting functionality =comment-dwim= (usually bound to =M-;=) doesn't always comment things in the way you might expect so we use [[https://github.com/redguardtoo/evil-nerd-commenter][evil-nerd-commenter]] to provide a more familiar behavior.  I've bound it to =M-/= since other editors sometimes use this binding but you could also replace Emacs' =M-;= binding with this command.

#+begin_src emacs-lisp

(use-package evil-nerd-commenter
  :bind ("M-/" . evilnc-comment-or-uncomment-lines))

#+end_src

** Which Key
[[https://github.com/justbur/emacs-which-key][which-key]] is a useful UI panel that appears when you start pressing any key binding in Emacs to offer you all possible completions for the prefix.  For example, if you press =C-c= (hold control and press the letter =c=), a panel will appear at the bottom of the frame displaying all of the bindings under that prefix and which command they run.  This is very useful for learning the possible key bindings in the mode of your current buffer.
#+BEGIN_SRC emacs-lisp

(use-package which-key
  :defer 0
  :diminish which-key-mode
  :config
  (which-key-mode)
  (setq which-key-idle-delay 0.3))

#+END_SRC

** Helpful
[[https://github.com/Wilfred/helpful][Helpful]] adds a lot of very helpful (get it?) information to Emacs' =describe-= command buffers.  For example, if you use =describe-function=, you will not only get the documentation about the function, you will also see the source code of the function and where it gets used in other places in the Emacs configuration.  It is very useful for figuring out how things work in Emacs.

#+BEGIN_SRC emacs-lisp

(use-package helpful
  :bind
  ([remap describe-function] . helpful-callable)
  ([remap describe-variable] . helpful-variable)
  ([remap describe-command] . helpful-command)
  ([remap describe-key] . helpful-key))

#+END_SRC

** Rainbow delimiters
#+BEGIN_SRC emacs-lisp

(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))

#+END_SRC

** Projectile
#+BEGIN_SRC emacs-lisp

(use-package projectile
  :diminish projectile-mode
  :config (projectile-mode)
  :demand t
  :bind-keymap
  ("C-c p" . projectile-command-map)
  :init
  (when (file-directory-p "~/code")
    (setq projectile-project-search-path '("~/code")))
  (setq projectile-switch-project-action #'projectile-dired))

#+END_SRC

** Magit
#+BEGIN_SRC emacs-lisp

(use-package magit
  :commands (magit-status magit-get-current-branch)
  :custom
  (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

#+END_SRC

** Forge
#+BEGIN_SRC emacs-lisp

(use-package forge
  :after magit)

#+END_SRC

** Org Mode
[[https://orgmode.org/][Org Mode]] is one of the hallmark features of Emacs.  It is a rich document editor, project planner, task and time tracker, blogging engine, and literate coding utility all wrapped up in one package.

Font faces
#+BEGIN_SRC emacs-lisp

(defun vt/org-font-setup ()
  ;; Replace list hyphen with dot
  (font-lock-add-keywords 'org-mode
                          '(("^ *\\([-]\\) "
                             (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

  ;; Set faces for heading levels
  (dolist (face '((org-level-1 . 1.2)
                  (org-level-2 . 1.1)
                  (org-level-3 . 1.05)
                  (org-level-4 . 1.0)
                  (org-level-5 . 1.1)
                  (org-level-6 . 1.1)
                  (org-level-7 . 1.1)
                  (org-level-8 . 1.1)))
    (set-face-attribute (car face) nil :font "Overpass" :weight 'regular :height (cdr face)))

  ;; Ensure that anything that should be fixed-pitch in Org files appears that way
  (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-table nil   :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch))

#+END_SRC

Org mode configuration
#+BEGIN_SRC emacs-lisp

(defun vt/org-mode-setup ()
  (org-indent-mode)
  (variable-pitch-mode 1)
  (visual-line-mode 1))

(use-package org
  :commands (org-capture org-agenda)
  :hook (org-mode . vt/org-mode-setup)
  :config
  (setq org-ellipsis " ▾"
        org-hide-emphasis-markers t)
  (setq org-edit-src-content-indentation 2
        org-src-tab-acts-natively t
        org-src-preserve-indentation t)

  (setq org-fontify-done-headline t)
  (setq org-agenda-start-with-log-mode t)
  (setq org-log-done 'time)
  (setq org-log-into-drawer t)

  (setq org-agenda-files (list "~/Documents/org"))

  (require 'org-habit)
  (add-to-list 'org-modules 'org-habit)
  (setq org-habit-graph-column 60)

  (setq org-todo-keywords
        '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")
          (sequence "BACKLOG(b)" "PLAN(p)" "READY(r)" "ACTIVE(a)" "REVIEW(v)" "WAIT(w@/!)" "HOLD(h)" "|" "COMPLETED(c)" "CANC(k@)")))

  (setq org-refile-targets
        '(("Archive.org" :maxlevel . 1)
          ("Tasks.org" :maxlevel . 1)))

  ;; Save Org buffers after refiling!
  (advice-add 'org-refile :after 'org-save-all-org-buffers)

  (setq org-tag-alist
        '((:startgroup)
                                        ; Put mutually exclusive tags here
          (:endgroup)
          ("@errand" . ?E)
          ("@home" . ?H)
          ("@work" . ?W)
          ("agenda" . ?a)
          ("planning" . ?p)
          ("publish" . ?P)
          ("batch" . ?b)
          ("note" . ?n)
          ("idea" . ?i)))

  (setq org-agenda-custom-commands
        '(("d" "Dashboard"
           ((agenda "" ((org-deadline-warning-days 7)))
            (todo "NEXT"
                  ((org-agenda-overriding-header "Next Tasks")))
            (tags-todo "agenda/ACTIVE" ((org-agenda-overriding-header "Active Projects")))))

          ("n" "Next Tasks"
           ((todo "NEXT"
                  ((org-agenda-overriding-header "Next Tasks")))))

          ("W" "Work Tasks" tags-todo "+work-email")

          ;; Low-effort next actions
          ("e" tags-todo "+TODO=\"NEXT\"+Effort<15&+Effort>0"
           ((org-agenda-overriding-header "Low Effort Tasks")
            (org-agenda-max-todos 20)
            (org-agenda-files org-agenda-files)))

          ("w" "Workflow Status"
           ((todo "WAIT"
                  ((org-agenda-overriding-header "Waiting on External")
                   (org-agenda-files org-agenda-files)))
            (todo "REVIEW"
                  ((org-agenda-overriding-header "In Review")
                   (org-agenda-files org-agenda-files)))
            (todo "PLAN"
                  ((org-agenda-overriding-header "In Planning")
                   (org-agenda-todo-list-sublevels nil)
                   (org-agenda-files org-agenda-files)))
            (todo "BACKLOG"
                  ((org-agenda-overriding-header "Project Backlog")
                   (org-agenda-todo-list-sublevels nil)
                   (org-agenda-files org-agenda-files)))
            (todo "READY"
                  ((org-agenda-overriding-header "Ready for Work")
                   (org-agenda-files org-agenda-files)))
            (todo "ACTIVE"
                  ((org-agenda-overriding-header "Active Projects")
                   (org-agenda-files org-agenda-files)))
            (todo "COMPLETED"
                  ((org-agenda-overriding-header "Completed Projects")
                   (org-agenda-files org-agenda-files)))
            (todo "CANC"
                  ((org-agenda-overriding-header "Cancelled Projects")
                   (org-agenda-files org-agenda-files)))))))

  (setq org-capture-templates
        `(("t" "Tasks / Projects")
          ("tt" "Task" entry (file+olp "~/Documents/org/Tasks.org" "Inbox")
           "* TODO %?\n  %U\n  %a\n  %i" :empty-lines 1)

          ("j" "Journal Entries")
          ("jj" "Journal" entry
           (file+olp+datetree "~/Documents/org/Journal.org")
           "\n* %<%I:%M %p> - Journal :journal:\n\n%?\n\n"
           ;; ,(dw/read-file-as-string "~/Notes/Templates/Daily.org")
           :clock-in :clock-resume
           :empty-lines 1)
          ("jm" "Meeting" entry
           (file+olp+datetree "~/Documents/org/Journal.org")
           "* %<%I:%M %p> - %a :meetings:\n\n%?\n\n"
           :clock-in :clock-resume
           :empty-lines 1)

          ("w" "Workflows")
          ("we" "Checking Email" entry (file+olp+datetree "~/Documents/org/Journal.org")
           "* Checking Email :email:\n\n%?" :clock-in :clock-resume :empty-lines 1)

          ("m" "Metrics Capture")
          ("mw" "Weight" table-line (file+headline "~/Documents/org/Metrics.org" "Weight")
           "| %U | %^{Weight} | %^{Notes} |" :kill-buffer t)))

  (define-key global-map (kbd "C-c j")
    (lambda () (interactive) (org-capture nil "jj")))

  (vt/org-font-setup))

(use-package org-bullets
  :after org
  :hook (org-mode . org-bullets-mode))

(defun vt/org-mode-visual-fill ()
  (setq visual-fill-column-width 100
        visual-fill-column-center-text t)
  (visual-fill-column-mode 1))

(use-package visual-fill-column
  :hook (org-mode . vt/org-mode-visual-fill))
#+END_SRC

** Dired 
Dired is a built-in file manager for Emacs that does some pretty amazing things!  Here are some key bindings you should try out:

*** Key Bindings

**** Navigation

*Emacs* / *Evil*
- =n= / =j= - next line
- =p= / =k= - previous line
- =j= / =J= - jump to file in buffer
- =RET= - select file or directory
- =^= - go to parent directory
- =S-RET= / =g O= - Open file in "other" window
- =M-RET= - Show file in other window without focusing (previewing files)
- =g o= (=dired-view-file=) - Open file but in a "preview" mode, close with =q=
- =g= / =g r= Refresh the buffer with =revert-buffer= after changing configuration (and after filesystem changes!)

**** Marking files

- =m= - Marks a file
- =u= - Unmarks a file
- =U= - Unmarks all files in buffer
- =* t= / =t= - Inverts marked files in buffer
- =% m= - Mark files in buffer using regular expression
- =*= - Lots of other auto-marking functions
- =k= / =K= - "Kill" marked items (refresh buffer with =g= / =g r= to get them back)
- Many operations can be done on a single file if there are no active marks!
 
**** Copying and Renaming files

- =C= - Copy marked files (or if no files are marked, the current file)
- Copying single and multiple files
- =U= - Unmark all files in buffer
- =R= - Rename marked files, renaming multiple is a move!
- =% R= - Rename based on regular expression: =^test= , =old-\&=

*Power command*: =C-x C-q= (=dired-toggle-read-only=) - Makes all file names in the buffer editable directly to rename them!  Press =Z Z= to confirm renaming or =Z Q= to abort.

**** Deleting files

- =D= - Delete marked file
- =d= - Mark file for deletion
- =x= - Execute deletion for marks
- =delete-by-moving-to-trash= - Move to trash instead of deleting permanently

**** Creating and extracting archives

- =Z= - Compress or uncompress a file or folder to (=.tar.gz=)
- =c= - Compress selection to a specific file
- =dired-compress-files-alist= - Bind compression commands to file extension

**** Other common operations

- =T= - Touch (change timestamp)
- =M= - Change file mode
- =O= - Change file owner
- =G= - Change file group
- =S= - Create a symbolic link to this file
- =L= - Load an Emacs Lisp file into Emacs

*** Configuration

#+begin_src emacs-lisp

(use-package dired
  :ensure nil
  :straight nil
  :commands (dired dired-jump)
  :bind (("C-x C-j" . dired-jump))
  :custom ((dired-listing-switches "-agho --group-directories-first"))
  :config
  (evil-collection-define-key 'normal 'dired-mode-map
    "h" 'dired-single-up-directory
    "l" 'dired-single-buffer))

(use-package dired-single
  :after dired)

(use-package all-the-icons-dired
  :hook (dired-mode . all-the-icons-dired-mode))

(use-package dired-open
  :config
  ;; Doesn't work as expected!
  ;;(add-to-list 'dired-open-functions #'dired-open-xdg t)
  (setq dired-open-extensions '(("png" . "feh")
                                ("mkv" . "mpv"))))

;; (use-package dired-hide-dotfiles
;;   :hook (dired-mode . dired-hide-dotfiles-mode)
;;   :config
;;   (evil-collection-define-key 'normal 'dired-mode-map
;;     "H" 'dired-hide-dotfiles-mode))

#+end_src

** Eshell
[[https://www.gnu.org/software/emacs/manual/html_mono/eshell.html#Contributors-to-Eshell][Eshell]] is Emacs' own shell implementation written in Emacs Lisp.  It provides you with a cross-platform implementation (even on Windows!) of the common GNU utilities you would find on Linux and macOS (=ls=, =rm=, =mv=, =grep=, etc).  It also allows you to call Emacs Lisp functions directly from the shell and you can even set up aliases (like aliasing =vim= to =find-file=).  Eshell is also an Emacs Lisp REPL which allows you to evaluate full expressions at the shell.

The downsides to Eshell are that it can be harder to configure than other packages due to the particularity of where you need to set some options for them to go into effect, the lack of shell completions (by default) for some useful things like Git commands, and that REPL programs sometimes don't work as well.  However, many of these limitations can be dealt with by good configuration and installing external packages, so don't let that discourage you from trying it!

*Useful key bindings:*

- =C-c C-p= / =C-c C-n= - go back and forward in the buffer's prompts (also =[[= and =]]= with evil-mode)
- =M-p= / =M-n= - go back and forward in the input history
- =C-c C-u= - delete the current input string backwards up to the cursor

We will be covering Eshell more in future videos highlighting other things you can do with it.

For more thoughts on Eshell, check out these articles by Pierre Neidhardt:
- https://ambrevar.xyz/emacs-eshell/index.html
- https://ambrevar.xyz/emacs-eshell-versus-shell/index.html
  
#+begin_src emacs-lisp

(defun vt/configure-eshell ()
  ;; Save command history when commands are entered
  (add-hook 'eshell-pre-command-hook 'eshell-save-some-history)

  ;; Truncate buffer for performance
  (add-to-list 'eshell-output-filter-functions 'eshell-truncate-buffer)

  ;; Bind some useful keys for evil-mode
  (evil-define-key '(normal insert visual) eshell-mode-map (kbd "<home>") 'eshell-bol)
  (evil-normalize-keymaps)

  (setq eshell-history-size         10000
        eshell-buffer-maximum-lines 10000
        eshell-hist-ignoredups t
        eshell-scroll-to-bottom-on-input t))

(use-package eshell-git-prompt
  :after eshell)

(use-package eshell
  :hook (eshell-first-time-mode . vt/configure-eshell)
  :config

  (with-eval-after-load 'esh-opt
    (setq eshell-destroy-buffer-when-process-dies t)
    (setq eshell-visual-commands '("htop" "zsh" "vim")))

  (eshell-git-prompt-use-theme 'powerline))


#+end_src

** Emoji
Emojify is an Emacs extension to display emojis. It can display github style emojis like :smile: or plain ascii ones like :). It tries to be as efficient as possible, while also providing a lot of flexibility.
#+begin_src emacs-lisp
(use-package emojify
  :hook (after-init . global-emojify-mode))
#+end_src

** Elfeed
An RSS newsfeed reader for Emacs.

#+begin_src emacs-lisp

(use-package elfeed
  :after evil
  :commands elfeed
  :config
  (setq elfeed-search-feed-face ":foreground #fff :weight bold")
  (setq elfeed-feeds
    '(("https://nullprogram.com/feed/" blog)
      ("https://ambrevar.xyz/atom.xml" blog)
      ("https://guix.gnu.org/feeds/blog.atom" os linux)
      ("https://www.reddit.com/r/emacs.rss" reddit emacs)
      ("https://www.reddit.com/r/vim.rss" reddit vim)
      ("https://www.reddit.com/r/neovim.rss" reddit vim)
      ("https://www.reddit.com/r/linux.rss" reddit linux)
      ("https://hnrss.org/frontpage" hackernews)
      ("https://www.reddit.com/r/commandline.rss" reddit cmd))))

(use-package elfeed-goodies
  :after elfeed
  :init
  (elfeed-goodies/setup))

#+end_src

** Lispy 
Here are packages that are useful across different Lisp and Scheme implementations: 

#+begin_src emacs-lisp

(use-package lispy
  :hook ((emacs-lisp-mode . lispy-mode)
         (scheme-mode . lispy-mode)))

(use-package lispyville
  :hook ((lispy-mode . lispyville-mode))
  :config
  (lispyville-set-key-theme '(operators c-w additional
										additional-movement slurp/barf-cp
										prettify)))

#+end_src

** Smart Parens
#+begin_src emacs-lisp

(use-package smartparens
  :hook (prog-mode . smartparens-mode))

#+end_src

* Utilities
Setup org babel

#+BEGIN_SRC emacs-lisp

(with-eval-after-load 'org
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((emacs-lisp . t)
       (python . t)))

    (setq org-confirm-babel-evaluate nil)
    (push '("conf-unix" . conf-unix) org-src-lang-modes))

(with-eval-after-load 'org
    (require 'org-tempo)

    (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("py" . "src python"))
    (add-to-list 'org-structure-template-alist '("js" . "src javascript")))

#+END_SRC

Auto tangle  config file
#+begin_src emacs-lisp

;; Automatically tangle our Emacs.org config file when we save it
(defun vt/org-babel-tangle-config ()
  (when (string-equal (buffer-file-name)
                      (expand-file-name "~/emacs-configs/emacs-default/dotemacs.org"))
    ;; Dynamic scoping to the rescue
    (let ((org-confirm-babel-evaluate nil))
      (org-babel-tangle))))

(add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'vt/org-babel-tangle-config)))
#+end_src

* Development
** IDE Features with lsp-mode
*** lsp-mode
We use the excellent [[https://emacs-lsp.github.io/lsp-mode/][lsp-mode]] to enable IDE-like functionality for many different programming languages via "language servers" that speak the [[https://microsoft.github.io/language-server-protocol/][Language Server Protocol]].  Before trying to set up =lsp-mode= for a particular language, check out the [[https://emacs-lsp.github.io/lsp-mode/page/languages/][documentation for your language]] so that you can learn which language servers are available and how to install them.

The =lsp-keymap-prefix= setting enables you to define a prefix for where =lsp-mode='s default keybindings will be added.  I *highly recommend* using the prefix to find out what you can do with =lsp-mode= in a buffer.

The =which-key= integration adds helpful descriptions of the various keys so you should be able to learn a lot just by pressing =C-c l= in a =lsp-mode= buffer and trying different things that you find there.

#+begin_src emacs-lisp

(use-package lsp-mode
  :straight t
  :commands (lsp lsp-deferred)
  :hook ((typescript-mode js2-mode web-mode) . lsp)
  :init
  (setq lsp-keymap-prefix "C-c l")  ;; Or 'C-l', 's-l'
  :custom (lsp-headerline-breadcrumb-enable nil)
  :config
  (lsp-enable-which-key-integration t))

#+end_src

*** lsp-ui
[[https://emacs-lsp.github.io/lsp-ui/][lsp-ui]] is a set of UI enhancements built on top of =lsp-mode= which make Emacs feel even more like an IDE.  Check out the screenshots on the =lsp-ui= homepage (linked at the beginning of this paragraph) to see examples of what it can do.

#+begin_src emacs-lisp

(use-package lsp-ui
  :hook (lsp-mode . lsp-ui-mode)
  :custom
  (lsp-ui-doc-position 'bottom))

#+end_src

*** Autocomplete
[[https://github.com/minad/corfu][Corfu]] enhances the default completion in region function with a completion overlay. The current candidates are shown in a popup below or above the point. Corfu can be considered the minimalistic completion-in-region counterpart of the Vertico minibuffer UI.

#+begin_src emacs-lisp

(use-package corfu
  :bind (:map corfu-map
			  ("TAB" . corfu-next)
			  ("S-TAB" . corfu-previous))
  :custom
  (corfu-cycle t)
  :config
  (corfu-global-mode))

#+end_src

*** Tree Sitter
The minor mode tree-sitter-mode provides a buffer-local syntax tree, which is kept up-to-date with changes to the buffer’s text.

#+begin_src emacs-lisp

(use-package tree-sitter
  :after evil
  :init (global-tree-sitter-mode)
  :hook (tree-sitter-after-on-hook . tree-sitter-hl-mode))

(use-package tree-sitter-langs
  :after evil)

#+end_src

** Languages
*** TypeScript
This is a basic configuration for the TypeScript language so that =.ts or .tsx= files activate =typescript-mode= when opened. We're also adding a hook to =typescript-mode-hook= to call =lsp-deferred= so that we activate =lsp-mode= to get LSP features every time we edit TypeScript code.

#+begin_src emacs-lisp

(use-package typescript-mode
  :mode "\\.tsx?\\'"
  :hook (typescript-mode . lsp-deferred)
  :config
  (setq typescript-indent-level 2))

#+end_src

*** JavaScript
Inspired from Doom Emacs

#+begin_src emacs-lisp

(use-package js2-mode
  :mode "\\.[mc]?js\\'"
  :mode "\\.es6\\'"
  :interpreter "node"
  :commands js2-line-break
  :config
  (setq js-chain-indent t
		;; Don't mishighlight shebang lines
		js2-skip-preprocessor-directives t
		;; let flycheck handle this
		js2-mode-show-parse-errors nil
		js2-mode-show-strict-warnings nil
		;; Flycheck provides these features, so disable them: conflicting with
		;; the eslint settings.
		js2-strict-trailing-comma-warning nil
		js2-strict-missing-semi-warning nil
		;; maximum fontification
		js2-highlight-level 3
		js2-highlight-external-variables t
		js2-idle-timer-delay 0.1)

  (add-hook 'js2-mode-hook #'rainbow-delimiters-mode)
  ;; Indent switch-case another step
  (setq mode-name "JS2"))

#+end_src

* Runtime performance
Dial the GC threshold back down so that garbage collection happens more frequently but in less time.

#+begin_src emacs-lisp

;; Make gc pauses faster by decreasing the threshold.
(setq gc-cons-threshold (* 2 1000 1000))

#+end_src

